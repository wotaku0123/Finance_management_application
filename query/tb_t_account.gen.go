// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"financialManagementApplication/model"
)

func newTbTAccount(db *gorm.DB, opts ...gen.DOOption) tbTAccount {
	_tbTAccount := tbTAccount{}

	_tbTAccount.tbTAccountDo.UseDB(db, opts...)
	_tbTAccount.tbTAccountDo.UseModel(&model.TbTAccount{})

	tableName := _tbTAccount.tbTAccountDo.TableName()
	_tbTAccount.ALL = field.NewAsterisk(tableName)
	_tbTAccount.ID = field.NewInt32(tableName, "id")
	_tbTAccount.Email = field.NewString(tableName, "email")
	_tbTAccount.Name = field.NewString(tableName, "name")
	_tbTAccount.Username = field.NewString(tableName, "username")
	_tbTAccount.Password = field.NewString(tableName, "password")
	_tbTAccount.AccessToken = field.NewString(tableName, "access_token")
	_tbTAccount.RefreshToken = field.NewString(tableName, "refresh_token")
	_tbTAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tbTAccount.CreatedAt = field.NewTime(tableName, "created_at")


	_tbTAccount.fillFieldMap()

	return _tbTAccount
}

type tbTAccount struct {
	tbTAccountDo

	ALL          field.Asterisk
	ID           field.Int32
	Email		 field.String
	Name         field.String
	Username	 field.String
	Password     field.String
	AccessToken  field.String
	RefreshToken field.String
	CreatedAt	 field.Time
	UpdatedAt	 field.Time

	fieldMap map[string]field.Expr
}

func (t tbTAccount) Table(newTableName string) *tbTAccount {
	t.tbTAccountDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tbTAccount) As(alias string) *tbTAccount {
	t.tbTAccountDo.DO = *(t.tbTAccountDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tbTAccount) updateTableName(table string) *tbTAccount {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt32(table, "id")
	t.Email = field.NewString(table, "email")
	t.Name = field.NewString(table, "name")
	t.Username = field.NewString(table, "username")
	t.Password = field.NewString(table, "password")
	t.AccessToken = field.NewString(table, "access_token")
	t.RefreshToken = field.NewString(table, "refresh_token")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *tbTAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tbTAccount) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 5)
	t.fieldMap["id"] = t.ID
	t.fieldMap["email"] = t.Email
	t.fieldMap["name"] = t.Name
	t.fieldMap["username"] = t.Username
	t.fieldMap["password"] = t.Password
	t.fieldMap["access_token"] = t.AccessToken
	t.fieldMap["refresh_token"] = t.RefreshToken
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t tbTAccount) clone(db *gorm.DB) tbTAccount {
	t.tbTAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tbTAccount) replaceDB(db *gorm.DB) tbTAccount {
	t.tbTAccountDo.ReplaceDB(db)
	return t
}

type tbTAccountDo struct{ gen.DO }

type ITbTAccountDo interface {
	gen.SubQuery
	Debug() ITbTAccountDo
	WithContext(ctx context.Context) ITbTAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITbTAccountDo
	WriteDB() ITbTAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITbTAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITbTAccountDo
	Not(conds ...gen.Condition) ITbTAccountDo
	Or(conds ...gen.Condition) ITbTAccountDo
	Select(conds ...field.Expr) ITbTAccountDo
	Where(conds ...gen.Condition) ITbTAccountDo
	Order(conds ...field.Expr) ITbTAccountDo
	Distinct(cols ...field.Expr) ITbTAccountDo
	Omit(cols ...field.Expr) ITbTAccountDo
	Join(table schema.Tabler, on ...field.Expr) ITbTAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITbTAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITbTAccountDo
	Group(cols ...field.Expr) ITbTAccountDo
	Having(conds ...gen.Condition) ITbTAccountDo
	Limit(limit int) ITbTAccountDo
	Offset(offset int) ITbTAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITbTAccountDo
	Unscoped() ITbTAccountDo
	Create(values ...*model.TbTAccount) error
	CreateInBatches(values []*model.TbTAccount, batchSize int) error
	Save(values ...*model.TbTAccount) error
	First() (*model.TbTAccount, error)
	Take() (*model.TbTAccount, error)
	Last() (*model.TbTAccount, error)
	Find() ([]*model.TbTAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbTAccount, err error)
	FindInBatches(result *[]*model.TbTAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TbTAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITbTAccountDo
	Assign(attrs ...field.AssignExpr) ITbTAccountDo
	Joins(fields ...field.RelationField) ITbTAccountDo
	Preload(fields ...field.RelationField) ITbTAccountDo
	FirstOrInit() (*model.TbTAccount, error)
	FirstOrCreate() (*model.TbTAccount, error)
	FindByPage(offset int, limit int) (result []*model.TbTAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITbTAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tbTAccountDo) Debug() ITbTAccountDo {
	return t.withDO(t.DO.Debug())
}

func (t tbTAccountDo) WithContext(ctx context.Context) ITbTAccountDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tbTAccountDo) ReadDB() ITbTAccountDo {
	return t.Clauses(dbresolver.Read)
}

func (t tbTAccountDo) WriteDB() ITbTAccountDo {
	return t.Clauses(dbresolver.Write)
}

func (t tbTAccountDo) Session(config *gorm.Session) ITbTAccountDo {
	return t.withDO(t.DO.Session(config))
}

func (t tbTAccountDo) Clauses(conds ...clause.Expression) ITbTAccountDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tbTAccountDo) Returning(value interface{}, columns ...string) ITbTAccountDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tbTAccountDo) Not(conds ...gen.Condition) ITbTAccountDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tbTAccountDo) Or(conds ...gen.Condition) ITbTAccountDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tbTAccountDo) Select(conds ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tbTAccountDo) Where(conds ...gen.Condition) ITbTAccountDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tbTAccountDo) Order(conds ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tbTAccountDo) Distinct(cols ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tbTAccountDo) Omit(cols ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tbTAccountDo) Join(table schema.Tabler, on ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tbTAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tbTAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tbTAccountDo) Group(cols ...field.Expr) ITbTAccountDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tbTAccountDo) Having(conds ...gen.Condition) ITbTAccountDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tbTAccountDo) Limit(limit int) ITbTAccountDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tbTAccountDo) Offset(offset int) ITbTAccountDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tbTAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITbTAccountDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tbTAccountDo) Unscoped() ITbTAccountDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tbTAccountDo) Create(values ...*model.TbTAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tbTAccountDo) CreateInBatches(values []*model.TbTAccount, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tbTAccountDo) Save(values ...*model.TbTAccount) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tbTAccountDo) First() (*model.TbTAccount, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbTAccount), nil
	}
}

func (t tbTAccountDo) Take() (*model.TbTAccount, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbTAccount), nil
	}
}

func (t tbTAccountDo) Last() (*model.TbTAccount, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbTAccount), nil
	}
}

func (t tbTAccountDo) Find() ([]*model.TbTAccount, error) {
	result, err := t.DO.Find()
	return result.([]*model.TbTAccount), err
}

func (t tbTAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TbTAccount, err error) {
	buf := make([]*model.TbTAccount, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tbTAccountDo) FindInBatches(result *[]*model.TbTAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tbTAccountDo) Attrs(attrs ...field.AssignExpr) ITbTAccountDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tbTAccountDo) Assign(attrs ...field.AssignExpr) ITbTAccountDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tbTAccountDo) Joins(fields ...field.RelationField) ITbTAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tbTAccountDo) Preload(fields ...field.RelationField) ITbTAccountDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tbTAccountDo) FirstOrInit() (*model.TbTAccount, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbTAccount), nil
	}
}

func (t tbTAccountDo) FirstOrCreate() (*model.TbTAccount, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TbTAccount), nil
	}
}

func (t tbTAccountDo) FindByPage(offset int, limit int) (result []*model.TbTAccount, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tbTAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tbTAccountDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tbTAccountDo) Delete(models ...*model.TbTAccount) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tbTAccountDo) withDO(do gen.Dao) *tbTAccountDo {
	t.DO = *do.(*gen.DO)
	return t
}
